/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interface;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author SONY
 */
public class Gestion_Ubicaciones extends javax.swing.JFrame {
  private final String RUTA_CARPETA_DIS = "dis"; // Carpeta donde se guardarán las imágenes
  private final String ARCHIVO_RUTA_IMAGEN = "ultima_imagen.txt"; // Archivo para guardar la ubicación de la imagen
   Conexion CDB= new Conexion();

    /**
     * Creates new form Gestion_Ubicaciones
     */
    public Gestion_Ubicaciones() {
        initComponents();
    }
    public void vt(){
        CDB.getConexion();
    try {
       
        CDB.verTabla("Ubicaciones", jScrollPane1);
        CDB.conexion.close();
    } catch (SQLException ex) {
        Logger.getLogger(Gestion_Productos.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton1.setText("Cargar mapa");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("ID");

        jLabel3.setText("ID PRODUCTO");

        jLabel4.setText("CAPACIDAD");

        jLabel5.setText("PASILLO");

        jButton2.setText("REGRESAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("AÑADIR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("BORRAR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("BUSCAR");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel6.setText("ESTANTERIA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addGap(10, 10, 10))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(196, 196, 196))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(68, 68, 68)))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         jLabel1.setHorizontalAlignment(JLabel.CENTER);  // Centra la imagen en el JLabel
           // Crear la carpeta 'dis' si no existe
        crearCarpetaSiNoExiste();

        // Cargar la última imagen guardada si existe
        cargarImagenGuardada();
         // Acción del botón para cargar la imagen
        jButton1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Selecciona una imagen");

                // Filtro para que solo se puedan seleccionar imágenes
                fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
                    @Override
                    public boolean accept(File f) {
                        if (f.isDirectory()) {
                            return true;
                        } else {
                            String filename = f.getName().toLowerCase();
                            return filename.endsWith(".jpg") || filename.endsWith(".jpeg") || filename.endsWith(".png") || filename.endsWith(".gif");
                        }
                    }

                    @Override
                    public String getDescription() {
                        return "Imágenes (*.jpg, *.jpeg, *.png, *.gif)";
                    }
                });

                // Mostrar el diálogo de selección de archivo
                int seleccion = fileChooser.showOpenDialog(null);

                // Verificar si se seleccionó un archivo
                if (seleccion == JFileChooser.APPROVE_OPTION) {
                    File archivoSeleccionado = fileChooser.getSelectedFile();
                    String nombreArchivo = archivoSeleccionado.getName();
                    String rutaDestino = RUTA_CARPETA_DIS + File.separator + nombreArchivo;

                    // Copiar el archivo seleccionado a la carpeta 'dis'
                    copiarArchivo(archivoSeleccionado, new File(rutaDestino));

                    // Guardar la ubicación de la imagen
                    guardarRutaImagen(rutaDestino);

                    // Cargar la imagen seleccionada en el JLabel
                    cargarImagen(rutaDestino);
                }
            }
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dispose();
               Login p= new Login();
               p.setLocationRelativeTo(null);
               p.pack();
               p.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
                    ResultSet resultado;
                    PreparedStatement stmt;
                    String id="";
                   
                    
                   
                    
              if (jTextField1.getText().equalsIgnoreCase("")
                        ||jTextField2.getText().equalsIgnoreCase("")
                        ||jTextField3.getText().equalsIgnoreCase("")
                        ||jTextField4.getText().equalsIgnoreCase("")
                      ||jTextField5.getText().equalsIgnoreCase("")){
        
                   JOptionPane.showMessageDialog(null,"Alguno de los campos esta vacio");
            }else{  
                  
                  try {
                    CDB.getConexion();
                    String instruccion=("select * from Ubicaciones where id_ubicacion = \""+jTextField1.getText()+"\"");
                    Statement sentencia=CDB.conexion.createStatement();
                    resultado=sentencia.executeQuery(instruccion);
                    ResultSetMetaData metaDatos=resultado.getMetaData();
                    int numColumnas=metaDatos.getColumnCount();
                    String []d=new String[4];
             while(resultado.next()){
                for(int i=1;i<=numColumnas;i++){
                 String tipo = metaDatos.getColumnTypeName(i);
                switch(tipo){
                    case "VARCHAR":
                        d[i-1]=resultado.getString(i);
                        break;
                    case "float":
                        d[i-1]=resultado.getFloat(i)+"";
                        break;
                    case "double":
                        d[i-1]=resultado.getDouble(i)+"";
                        break;
                    case "INT":
                        d[i-1]=resultado.getInt(i)+"";
                        break;
                    default: System.out.println(" "+tipo);
                 }
                    }
                }
                    id=d[0];
                    if(jTextField1.getText().equalsIgnoreCase(id)){
                    JOptionPane.showMessageDialog(null, "el id="+id+" ya existe");
                    
                    }
                    else{
                    String valor1=jTextField1.getText();
                    String valor2=jTextField2.getText();
                    
                    String valor3=jTextField3.getText();                     
                    String valor4=jTextField4.getText();
                        
                    String valor5=jTextField5.getText();
                    
                    
                    stmt=CDB.conexion.prepareStatement("insert into Ubicaciones values (?,?,?,?,?)");
                    stmt.setString(1, valor1);
                    stmt.setString(2, valor2);
                    stmt.setString(3, valor3);
                    stmt.setString(4, valor4);
                    stmt.setString(5, valor5);
                    stmt.execute();
                    }
                    
                    CDB.verTabla("Ubicaciones", jScrollPane1);
                    CDB.conexion.close();
                   } catch (SQLException ex) {
        Logger.getLogger(Gestion_Productos.class.getName()).log(Level.SEVERE, null, ex);
                }
              }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
        // TODO add your handling code here:
        CDB.getConexion();
          if (jTextField1.getText().equalsIgnoreCase("")
                        ||jTextField2.getText().equalsIgnoreCase("")
                        ||jTextField3.getText().equalsIgnoreCase("")
                        ||jTextField4.getText().equalsIgnoreCase("")){
            JOptionPane.showMessageDialog(null,"Alguno de los campos esta vacio");
            }else{
       
        String instruccion;
        Statement sentencia=CDB.conexion.createStatement();
        instruccion="delete from Ubicaciones where id_ubicacion = \""+jTextField1.getText()+"\"";
        
        sentencia.execute(instruccion);
        System.out.println(instruccion);
          } CDB.verTabla("Ubicaciones", jScrollPane1);
        CDB.conexion.close();
    } catch (SQLException ex) {
        Logger.getLogger(Gestion_Productos.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if (jTextField1.getText().equalsIgnoreCase("")){
        JOptionPane.showMessageDialog(null,"El campo ID esta vacio");
        }else{
        try {
          
            ResultSet resultado;
            CDB.getConexion();
            String instruccion=("select * from Ubicaciones where id_ubicacion = \""+jTextField1.getText()+"\"");
            Statement sentencia=CDB.conexion.createStatement();
            resultado=sentencia.executeQuery(instruccion);
            ResultSetMetaData metaDatos=resultado.getMetaData();
            int numColumnas=metaDatos.getColumnCount();
            String []d=new String[5];
             while(resultado.next()){
                for(int i=1;i<=numColumnas;i++){
                 String tipo = metaDatos.getColumnTypeName(i);
                switch(tipo){
                    case "VARCHAR":
                        d[i-1]=resultado.getString(i);  
                        break;
                    case "float":
                        d[i-1]=resultado.getFloat(i)+"";
                        break;
                    case "double":
                        d[i-1]=resultado.getDouble(i)+"";
                        break;
                    case "INT":
                        d[i-1]=resultado.getInt(i)+"";
                        break;
                    default: System.out.println(" "+tipo);
                }
                }  
             }
             jTextField2.setText(d[1]);
             jTextField3.setText(d[2]);
             jTextField4.setText(d[3]);
             jTextField5.setText(d[4]);
            
             } catch(NullPointerException e){}
         
         catch (SQLException ex) {
        Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_jButton5ActionPerformed
    // Crear la carpeta 'dis' si no existe
    private void crearCarpetaSiNoExiste() {
        Path path = Paths.get(RUTA_CARPETA_DIS);
        if (!Files.exists(path)) {
            try {
                Files.createDirectory(path);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    // Cargar la última imagen guardada en el JLabel
    private void cargarImagenGuardada() {
        try (BufferedReader reader = new BufferedReader(new FileReader(ARCHIVO_RUTA_IMAGEN))) {
            String rutaImagen = reader.readLine();
            if (rutaImagen != null && !rutaImagen.isEmpty()) {
                cargarImagen(rutaImagen);
            }
        } catch (IOException e) {
            System.out.println("No se pudo cargar la última imagen guardada.");
        }
    }

    // Cargar la imagen en el JLabel
    private void cargarImagen(String rutaImagen) {
        ImageIcon imagen = new ImageIcon(rutaImagen);
        Image imagenEscalada = imagen.getImage().getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH);
        jLabel1.setIcon(new ImageIcon(imagenEscalada));
    }

    // Guardar la ruta de la imagen en un archivo de texto
    private void guardarRutaImagen(String rutaImagen) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(ARCHIVO_RUTA_IMAGEN))) {
            writer.write(rutaImagen);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Copiar el archivo a la carpeta 'dis'
    private void copiarArchivo(File fuente, File destino) {
        try {
            Files.copy(fuente.toPath(), destino.toPath());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gestion_Ubicaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gestion_Ubicaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gestion_Ubicaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gestion_Ubicaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gestion_Ubicaciones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
